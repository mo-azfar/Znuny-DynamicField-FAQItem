<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Znuny-DynamicField-FAQItem</Name>
    <Version>7.0.1</Version>
    <Vendor>mo-azfar</Vendor>
    <URL>https://github.com/mo-azfar/Znuny-DynamicField-FAQItem/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2024-07-27 00:00:01" Version="7.0.1">New package.</ChangeLog>
    <Description Lang="en">Populate list of FAQ in dynamic field and link it to the ticket.</Description>
    <Framework>7.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">
        &lt;br/&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to install the package Znuny-DynamicField-FAQItem. Check &lt;a href='https://github.com/mo-azfar/Znuny-DynamicField-FAQItem/' target='_blank'/&gt;README&lt;/a&gt;&lt;br/&gt;
        &lt;br/&gt;&lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">
        &lt;br/&gt;
        Changelog&lt;br/&gt;
        7.0.1 - New package.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;&lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;
    </IntroUpgrade>
    <BuildDate>2024-07-27 04:56:41</BuildDate>
    <BuildHost>app.wsl.my</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/XML/ZZZDynamicFieldFAQ.xml" Permission="660" Encode="Base64"></File>
        <File Location="Kernel/Modules/AdminDynamicFieldFAQItem.pm" Permission="660" Encode="Base64"></File>
        <File Location="Kernel/Modules/AJAXDynamicFieldFAQItem.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAyNCBtby1hemZhciwgaHR0cHM6Ly9naXRodWIuY29tL21vLWF6ZmFyLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFKQVhEeW5hbWljRmllbGRGQVFJdGVtOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KDphbGwpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcsCik7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTG9nT2JqZWN0ICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpOwogICAgbXkgJExheW91dE9iamVjdCAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKICAgIG15ICRQYXJhbU9iamVjdCAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBteSAkRkFRT2JqZWN0ICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkZBUScpOwogICAgbXkgJEhUTUxVdGlsc09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpIVE1MVXRpbHMnKTsKCiAgICBpZiAoICRTZWxmLT57U3ViYWN0aW9ufSBuZSAnR2V0RkFRSXRlbURhdGEnICkgewogICAgICAgICRMb2dPYmplY3QtPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ1N1YmFjdGlvbiBpcyBtaXNzaW5nIG9yIGludmFsaWQuJywKICAgICAgICApOwoKICAgICAgICByZXR1cm47CiAgICB9CgogICAgbXkgQFNlbGVjdGVkSURzID0gJFBhcmFtT2JqZWN0LT5HZXRBcnJheSgKICAgICAgICBQYXJhbSA9PiAnU2VsZWN0ZWRJRHNbXScsCiAgICAgICAgUmF3ICAgPT4gMSwKICAgICk7CgogICAgbXkgJERhdGE7CgogICAgSUQ6CiAgICBmb3IgbXkgJElEICggc29ydCBAU2VsZWN0ZWRJRHMgKSB7CgogICAgICAgIG5leHQgSUQgaWYgISRJRDsKCiAgICAgICAgbXkgJUZBUSA9ICRGQVFPYmplY3QtPkZBUUdldCgKICAgICAgICAgICAgSXRlbUlEICAgICA9PiAkSUQsCiAgICAgICAgICAgIEl0ZW1GaWVsZHMgPT4gMSwKICAgICAgICAgICAgVXNlcklEICAgICA9PiAxLAogICAgICAgICk7CgogICAgICAgICNTb2x1dGlvbgogICAgICAgIG15ICRTb2x1dGlvbkhUTUxTdHJpbmcgPSAkSFRNTFV0aWxzT2JqZWN0LT5Ub0hUTUwoCiAgICAgICAgICAgIFN0cmluZyAgICAgICAgICAgICA9PiAkRkFRe0ZpZWxkM30sCiAgICAgICAgICAgIFJlcGxhY2VEb3VibGVTcGFjZSA9PiAwLAogICAgICAgICk7CgogICAgICAgICRTb2x1dGlvbkhUTUxTdHJpbmcgPSAkSFRNTFV0aWxzT2JqZWN0LT5Eb2N1bWVudFN0cmlwKAogICAgICAgICAgICBTdHJpbmcgPT4gJFNvbHV0aW9uSFRNTFN0cmluZywKICAgICAgICApOwoKICAgICAgICAkU29sdXRpb25IVE1MU3RyaW5nID0gJEhUTUxVdGlsc09iamVjdC0+RG9jdW1lbnRDbGVhbnVwKAogICAgICAgICAgICBTdHJpbmcgPT4gJFNvbHV0aW9uSFRNTFN0cmluZywKICAgICAgICApOwoKICAgICAgICBteSAlU2FmZVNvbHV0aW9uID0gJEhUTUxVdGlsc09iamVjdC0+U2FmZXR5KAogICAgICAgICAgICBTdHJpbmcgICAgICAgPT4gJFNvbHV0aW9uSFRNTFN0cmluZywKICAgICAgICAgICAgTm9BcHBsZXQgICAgID0+IDEsCiAgICAgICAgICAgIE5vT2JqZWN0ICAgICA9PiAxLAogICAgICAgICAgICBOb0VtYmVkICAgICAgPT4gMSwKICAgICAgICAgICAgTm9TVkcgICAgICAgID0+IDEsCiAgICAgICAgICAgIE5vSW1nICAgICAgICA9PiAxLAogICAgICAgICAgICBOb0ludFNyY0xvYWQgPT4gMSwKICAgICAgICAgICAgTm9FeHRTcmNMb2FkID0+IDEsCiAgICAgICAgICAgIE5vSmF2YVNjcmlwdCA9PiAxLAogICAgICAgICAgICBSZXBsYWNlbWVudFN0ciA9PgogICAgICAgICAgICAgICAgJ1tSRVBMQUNFRF0nLCAgICAjIG9wdGlvbmFsLCBzdHJpbmcgdG8gc2hvdyBpbnN0ZWFkIG9mIGFwcGxldCwgb2JqZWN0LCBlbWJlZCwgc3ZnIGFuZCBpbWcgdGFncwogICAgICAgICk7CgogICAgICAgICREYXRhLT57RkFRfS0+eyRJRH0gPSB7CiAgICAgICAgICAgIE51bWJlciAgID0+ICRGQVF7TnVtYmVyfSwKICAgICAgICAgICAgVGl0bGUgICAgPT4gJEZBUXtUaXRsZX0sCiAgICAgICAgICAgIFNvbHV0aW9uID0+ICRTYWZlU29sdXRpb257U3RyaW5nfSB8fCAnJywKICAgICAgICB9OwogICAgfQoKICAgIG15ICRKU09OID0gJExheW91dE9iamVjdC0+SlNPTkVuY29kZSgKICAgICAgICBEYXRhID0+ICREYXRhLAogICAgKTsKCiAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBDb250ZW50VHlwZSA9PiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgQ2hhcnNldCAgICAgPT4gJ3V0Zi04JywKICAgICAgICBDb250ZW50ICAgICA9PiAkSlNPTiAvLyAnW10nLAogICAgICAgIE5vQ2FjaGUgICAgID0+IDEsCiAgICApOwp9CgoxOwo=</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AdminDynamicFieldFAQItem.tt" Permission="660" Encode="Base64"></File>
        <File Location="Kernel/System/DynamicField/Driver/FAQItem.pm" Permission="660" Encode="Base64"></File>
        <File Location="Kernel/System/Ticket/Event/DynamicFieldFAQLinkSet.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAyMSBabnVueSBHbWJILCBodHRwczovL3pudW55Lm9yZy8KIyBDb3B5cmlnaHQgKEMpIDIwMjQgbW8tYXpmYXIsIGh0dHBzOi8vZ2l0aHViLmNvbS9tby1hemZhci8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlRpY2tldDo6RXZlbnQ6OkR5bmFtaWNGaWVsZEZBUUxpbmtTZXQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoOmFsbCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkJywKICAgICdLZXJuZWw6OlN5c3RlbTo6RkFRJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TGlua09iamVjdCcsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCik7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREeW5hbWljRmllbGRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkJyk7CiAgICBteSAkRkFRT2JqZWN0ICAgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkZBUScpOwogICAgbXkgJExpbmtPYmplY3QgICAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMaW5rT2JqZWN0Jyk7CiAgICBteSAkTG9nT2JqZWN0ICAgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBORUVERUQ6CiAgICBmb3IgbXkgJE5lZWRlZCAocXcoIERhdGEgRXZlbnQgQ29uZmlnIFVzZXJJRCApKSB7CiAgICAgICAgbmV4dCBORUVERUQgaWYgJFBhcmFteyROZWVkZWR9OwoKICAgICAgICAkTG9nT2JqZWN0LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICROZWVkZWQhIgogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmICggISRQYXJhbXtEYXRhfS0+e1RpY2tldElEfSApIHsKICAgICAgICAkTG9nT2JqZWN0LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkIFRpY2tldElEIGluIERhdGEhIiwKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjZGVmaW5lIHZhbGlkIGR5bmFtaWMgZmllbGQgdHlwZXMgZm9yIHRoaXMgZXZlbnQgbW9kdWxlCiAgICBteSAlVmFsaWREeW5hbWljRmllbGRUeXBlcyA9ICgKICAgICAgICBGQVFJdGVtID0+IDEsCiAgICApOwoKICAgIG15ICREeW5hbWljRmllbGQgPSAkRHluYW1pY0ZpZWxkT2JqZWN0LT5EeW5hbWljRmllbGRHZXQoCiAgICAgICAgTmFtZSA9PiAkUGFyYW17RGF0YX0tPntGaWVsZE5hbWV9CiAgICApOwoKICAgICMgU2tpcCwgaWYgZHluYW1pYyBmaWVsZCB0eXBlIGlzIG5vdCB2YWxpZC4KICAgIHJldHVybiBpZiAhJFZhbGlkRHluYW1pY0ZpZWxkVHlwZXN7ICREeW5hbWljRmllbGQtPntGaWVsZFR5cGV9IH07CgogICAgIyBTa2lwLCBpZiBkeW5hbWljIGZpZWxkIG9iamVjdCB0eXBlIGlzIG5vdCBUaWNrZXQuCiAgICByZXR1cm4gaWYgJER5bmFtaWNGaWVsZC0+e09iamVjdFR5cGV9IG5lICdUaWNrZXQnOwoKICAgIG15ICRUaWNrZXRJRCA9ICRQYXJhbXtEYXRhfS0+e1RpY2tldElEfTsKCiAgICAjZ2V0IHByZXZpb3VzIGRhdGEKICAgIG15IEBPbGRWYWx1ZXM7CiAgICBpZiAoICRQYXJhbXtEYXRhfS0+e09sZFZhbHVlfSAmJiByZWYgJFBhcmFte0RhdGF9LT57T2xkVmFsdWV9IGVxICdBUlJBWScgKSB7CiAgICAgICAgQE9sZFZhbHVlcyA9IEB7ICRQYXJhbXtEYXRhfS0+e09sZFZhbHVlfSB9OwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17RGF0YX0tPntPbGRWYWx1ZX0gKSB7CiAgICAgICAgQE9sZFZhbHVlcyA9ICRQYXJhbXtEYXRhfS0+e09sZFZhbHVlfTsKICAgIH0KCiAgICAjZ2V0IG5ldyBkYXRhCiAgICBteSBATmV3VmFsdWVzOwogICAgaWYgKCByZWYgJFBhcmFte0RhdGF9LT57VmFsdWV9IGVxICdBUlJBWScgKSB7CiAgICAgICAgQE5ld1ZhbHVlcyA9IEB7ICRQYXJhbXtEYXRhfS0+e1ZhbHVlfSB9OwogICAgfQogICAgZWxzZSB7CiAgICAgICAgQE5ld1ZhbHVlcyA9ICRQYXJhbXtEYXRhfS0+e1ZhbHVlfTsKICAgIH0KCiAgICBpZiAoQE9sZFZhbHVlcykgewogICAgICAgIG15IEBSZW1vdmVJRHM7CgogICAgICAgIEZBUUl0ZW1JRDoKICAgICAgICBmb3IgbXkgJEZBUUl0ZW1JRCAoIHNvcnQgQE9sZFZhbHVlcyApIHsKCiAgICAgICAgICAgICNnZXQgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgb2xkIGFuZCBuZXcgdmFsdWVzCiAgICAgICAgICAgIG15ICRWYWx1ZVN0aWxsID0gZ3JlcCB7ICRfIGVxICRGQVFJdGVtSUQgfSBATmV3VmFsdWVzOwogICAgICAgICAgICBuZXh0IEZBUUl0ZW1JRCBpZiAkVmFsdWVTdGlsbDsKCiAgICAgICAgICAgICNhbGxvY2F0ZWQgdGhlIEZBUSBpdGVtIHRoYXQgbmVlZCB0byByZW1vdmUKICAgICAgICAgICAgcHVzaCBAUmVtb3ZlSURzLCAkRkFRSXRlbUlEOwogICAgICAgIH0KCiAgICAgICAgUmVtb3ZlRkFRSXRlbUlEOgogICAgICAgIGZvciBteSAkUmVtb3ZlRkFRSXRlbUlEICggc29ydCBAUmVtb3ZlSURzICkgewoKICAgICAgICAgICAgI3JlbW92ZSB0aGUgRkFRIGl0ZW0gZnJvbSB0aGUgdGlja2V0CiAgICAgICAgICAgICRMaW5rT2JqZWN0LT5MaW5rRGVsZXRlKAogICAgICAgICAgICAgICAgT2JqZWN0MSA9PiAnVGlja2V0JywKICAgICAgICAgICAgICAgIEtleTEgICAgPT4gJFRpY2tldElELAogICAgICAgICAgICAgICAgT2JqZWN0MiA9PiAnRkFRJywKICAgICAgICAgICAgICAgIEtleTIgICAgPT4gJFJlbW92ZUZBUUl0ZW1JRCwKICAgICAgICAgICAgICAgIFR5cGUgICAgPT4gJ05vcm1hbCcsCiAgICAgICAgICAgICAgICBVc2VySUQgID0+IDEsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBuZXh0IFJlbW92ZUZBUUl0ZW1JRDsKICAgICAgICB9CiAgICB9CgogICAgI2FkZCBsaW5rIHRvIEZBUSBpdGVtCiAgICBBZGRGQVFJdGVtSUQ6CiAgICBmb3IgbXkgJEFkZEZBUUl0ZW1JRCAoIHNvcnQgQE5ld1ZhbHVlcyApIHsKICAgICAgICAkTGlua09iamVjdC0+TGlua0FkZCgKICAgICAgICAgICAgU291cmNlT2JqZWN0ID0+ICdUaWNrZXQnLAogICAgICAgICAgICBTb3VyY2VLZXkgICAgPT4gJFRpY2tldElELAogICAgICAgICAgICBUYXJnZXRPYmplY3QgPT4gJ0ZBUScsCiAgICAgICAgICAgIFRhcmdldEtleSAgICA9PiAkQWRkRkFRSXRlbUlELAogICAgICAgICAgICBUeXBlICAgICAgICAgPT4gJ05vcm1hbCcsCiAgICAgICAgICAgIFN0YXRlICAgICAgICA9PiAnVmFsaWQnLAogICAgICAgICAgICBVc2VySUQgICAgICAgPT4gMSwKICAgICAgICApOwoKICAgICAgICBuZXh0IEFkZEZBUUl0ZW1JRDsKICAgIH0KCiAgICByZXR1cm4gMTsKfQoKMTsK</File>
        <File Location="var/httpd/htdocs/js/ZZZ.DynamicField.FAQItem.js" Permission="660" Encode="Base64">Ly8gLS0KLy8gQ29weXJpZ2h0IChDKSAyMDI0IG1vLWF6ZmFyLCBodHRwczovL2dpdGh1Yi5jb20vbW8tYXpmYXIKLy8gLS0KLy8gVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKLy8gdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQovLyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgovLyAtLQoKInVzZSBzdHJpY3QiOwoKdmFyIFpaWiA9IFpaWiB8fCB7fTsKWlpaLkR5bmFtaWNGaWVsZCA9IFpaWi5EeW5hbWljRmllbGQgfHwge307CgovKioKICogQG5hbWVzcGFjZSBaWlouRHluYW1pY0ZpZWxkLkZBUUl0ZW0KICogQG1lbWJlcm9mIFpaWi5EeW5hbWljRmllbGQKICogQGRlc2NyaXB0aW9uCiAqICAgICAgVGhpcyBuYW1lc3BhY2UgY29udGFpbnMgdGhlIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgRHluYW1pY0ZpZWxkLkZBUUl0ZW0uCiAqLwpaWlouRHluYW1pY0ZpZWxkLkZBUUl0ZW0gPSAoZnVuY3Rpb24gKFRhcmdldE5TKSB7CgogICAgLyoqCiAgICAgKiBAbmFtZSBJbml0CiAgICAgKiBAbWVtYmVyb2YgWlpaLkR5bmFtaWNGaWVsZC5GQVFJdGVtCiAgICAgKiBAZnVuY3Rpb24KICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogICAgICBJbml0aWFsaXplcyB0aGUgbW9kdWxlIGZ1bmN0aW9uYWxpdHkuCiAgICAgKi8KICAgIFRhcmdldE5TLkluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgVGFyZ2V0TlMuRXhwYW5kRHluYW1pY0ZBUUl0ZW1Sb3coKTsKICAgICAgICBUYXJnZXROUy5DcmVhdGVEeW5hbWljRkFRSXRlbVNwYW4oKTsKICAgICAgICBUYXJnZXROUy5DcmVhdGVEeW5hbWljRkFRSXRlbUlmcmFtZSgpOwogICAgfTsKCiAgICBUYXJnZXROUy5FeHBhbmREeW5hbWljRkFRSXRlbVJvdyA9IGZ1bmN0aW9uKCkgewogICAgICAgICQoJy5EeW5hbWljRmllbGRGQVFJdGVtJykuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIEZBUUlEID0gJCh0aGlzKS5hdHRyKCdpZCcpOwogICAgICAgICAgICB2YXIgRkFRRmllbGQgPSAkKCcjJyArIEZBUUlEKTsKICAgICAgICAgICAgdmFyICRSb3dEaXYgPSBGQVFGaWVsZC5jbG9zZXN0KCdkaXYuUm93Jyk7CiAgICAgICAgICAgIGlmICgkUm93RGl2Lmhhc0NsYXNzKCdjb2wtd2lkZS0zMycpIHx8ICRSb3dEaXYuaGFzQ2xhc3MoJ2NvbC13aWRlLTUwJykpIHsKICAgICAgICAgICAgICAgICRSb3dEaXYucmVtb3ZlQ2xhc3MoJ2NvbC13aWRlLTMzIGNvbC13aWRlLTUwJykuYWRkQ2xhc3MoJ2NvbC13aWRlLTEwMCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUm93RGl2Lmhhc0NsYXNzKCdjb2wtZGVza3RvcC0zMycpIHx8ICRSb3dEaXYuaGFzQ2xhc3MoJ2NvbC1kZXNrdG9wLTUwJykpIHsKICAgICAgICAgICAgICAgICRSb3dEaXYucmVtb3ZlQ2xhc3MoJ2NvbC1kZXNrdG9wIGNvbC1kZXNrdG9wLTUwJykuYWRkQ2xhc3MoJ2NvbC1kZXNrdG9wLTEwMCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUm93RGl2Lmhhc0NsYXNzKCdjb2wtdGFibGV0LTMzJykgfHwgJFJvd0Rpdi5oYXNDbGFzcygnY29sLXRhYmxldC01MCcpKSB7CiAgICAgICAgICAgICAgICAkUm93RGl2LnJlbW92ZUNsYXNzKCdjb2wtdGFibGV0LTMzIGNvbC10YWJsZXQtNTAnKS5hZGRDbGFzcygnY29sLXRhYmxldC0xMDAnKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIFRhcmdldE5TLkNyZWF0ZUR5bmFtaWNGQVFJdGVtU3BhbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIAogICAgICAgICQoJy5EeW5hbWljRmllbGRGQVFJdGVtJykuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIEZBUUlEID0gJCh0aGlzKS5hdHRyKCdpZCcpOwogICAgICAgICAgICB2YXIgRkFRRmllbGQgPSAkKCcjJyArIEZBUUlEKTsKICAgICAgICAgICAgdmFyIEZpZWxkRGl2ID0gRkFRRmllbGQuY2xvc2VzdCgnLkZpZWxkJyk7CiAgICAgICAgICAgIEZpZWxkRGl2LmFwcGVuZCgnPHNwYW4gY2xhc3M9ImZhcS1pdGVtLWluZm8iIGlkPSInICsgRkFRSUQgKyAnIj48L3NwYW4+Jyk7CiAgICAgICAgfSk7CiAgICAgICAKICAgIH0KCiAgICBUYXJnZXROUy5DcmVhdGVEeW5hbWljRkFRSXRlbUlmcmFtZSA9IGZ1bmN0aW9uKCkgewoKICAgICAgICAkKCcuRHluYW1pY0ZpZWxkRkFRSXRlbScpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBGQVFJRCA9ICQodGhpcykuYXR0cignaWQnKTsKICAgICAgICAgICAgdmFyIEZBUUZpZWxkID0gJCgnIycgKyBGQVFJRCk7CiAgICAgICAgICAgIHZhciBGaWVsZERpdiA9IEZBUUZpZWxkLmNsb3Nlc3QoJy5GaWVsZCcpOwogICAgICAgICAgICAKICAgICAgICAgICAgRkFRRmllbGQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgIHZhciBGQVFJdGVtID0gJCh0aGlzKS52YWwoKTsKICAgICAgICAgICAgICAgIHZhciBBcHBlbmRUbyA9IEZpZWxkRGl2LmZpbmQoJ3NwYW4uZmFxLWl0ZW0taW5mbycpOwogICAgICAgICAgICAgICAgQXBwZW5kVG8uZW1wdHkoKTsKICAgIAogICAgICAgICAgICAgICAgLy90dXJuIHNpbmdsZSBzZWxlY3Rpb24gdG8gYXJyYXkuIFRoaXMgaXMgdG8gbWFrZSBpdCBjb25zaXN0ZW50IHdpdGggbXVsdGlwbGUgc2VsZWN0aW9uLgogICAgICAgICAgICAgICAgaWYgKHR5cGVvZihGQVFJdGVtKSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICBGQVFJdGVtID0gW0ZBUUl0ZW1dOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChGQVFJdGVtLmxlbmd0aCA9PT0gMSAmJiBGQVFJdGVtWzBdID09PSAnJykgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICAgICAgLy9zZW5kIGRhdGEKICAgICAgICAgICAgICAgIENvcmUuQUpBWC5GdW5jdGlvbkNhbGwoCiAgICAgICAgICAgICAgICBDb3JlLkNvbmZpZy5HZXQoIkNHSUhhbmRsZSIpICsgIj9BY3Rpb249QUpBWER5bmFtaWNGaWVsZEZBUUl0ZW0iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFN1YmFjdGlvbjogIkdldEZBUUl0ZW1EYXRhIiwKICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZElEczogRkFRSXRlbSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoUmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIVJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBLZXkgaW4gUmVzcG9uc2UuRkFRKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBGQVEgPSBSZXNwb25zZS5GQVFbS2V5XTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aXRsZSBhdHRyaWJ1dGUgZm9yIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gdGhlIHRyZWUKICAgICAgICAgICAgICAgICAgICAkKCcjRHluYW1pY0ZpZWxkX0ZBUUxpc3RfU2VsZWN0JykuZmluZCgnbGlbZGF0YS1pZD0iJyArIEtleSArICciXVthcmlhLXNlbGVjdGVkPSJ0cnVlIl0nKS5hdHRyKCd0aXRsZScsICdIQUhBSEhBJyk7CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwZW5kIGFub3RoZXIgc3BhbiB0byB0aGUgcGFyZW50IHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwZW5kVG8uYXBwZW5kKCc8c3BhbiBjbGFzcz0iZWFjaC1mYXEtaXRlbSIgZGF0YS1hdHRyPSInICsgS2V5ICsgJyI+RkFRIycgKyBGQVEuTnVtYmVyICsgJyAtICcgKyBGQVEuVGl0bGUgKyAnPC9zcGFuPicpOwoKICAgICAgICAgICAgICAgICAgICAgICAgQXBwZW5kVG8uYXBwZW5kKCc8ZGl2IGlkPSJlYWNoLWZhcS1pdGVtLWlmcmFtZS0nICsgS2V5ICsnIiBjbGFzcz0iSGlkZGVuIj4gJyArIEZBUS5Tb2x1dGlvbiArICc8L2Rpdj4nKTsKICAgIAogICAgICAgICAgICAgICAgICAgICAgICAvL2FwcGVuZCBkaXYgd2l0aCBpZnJhbWUgdG8gdGhlIHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgLy9BcHBlbmRUby5hcHBlbmQoJzxkaXYgaWQ9ImVhY2gtZmFxLWl0ZW0taWZyYW1lLScgKyBLZXkgKyciIGNsYXNzPSJIaWRkZW4iPjxpZnJhbWUgc2FuZGJveD0iYWxsb3ctc2FtZS1vcmlnaW4gYWxsb3ctcG9wdXBzIGFsbG93LXBvcHVwcy10by1lc2NhcGUtc2FuZGJveCIgZnJhbWVib3JkZXI9IjAiIGlkPSJJZnJhbWVfRkFRXycgKyBLZXkgKyAnIiBzcmNkb2M9IicgKyBGQVEuU29sdXRpb24gKyAnIiBoZWlnaHQ9IjgwMCI+PC9pZnJhbWU+PC9kaXY+Jyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJqc29uIgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSkudHJpZ2dlcignY2hhbmdlJyk7CgogICAgICAgIH0pOwoKICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmVhY2gtZmFxLWl0ZW0nLCBUYXJnZXROUy5TaG93RHluYW1pY0ZBUUl0ZW1JbmZvKTsKCiAgICB9OwoKICAgIFRhcmdldE5TLlNob3dEeW5hbWljRkFRSXRlbUluZm8gPSBmdW5jdGlvbigpIHsKICAgICAgICAKICAgICAgICB2YXIgRkFRSUQgPSAkKHRoaXMpLmRhdGEoJ2F0dHInKTsKICAgICAgICB2YXIgRkFRVGl0bGUgPSAkKHRoaXMpLnRleHQoKTsKCiAgICAgICAgdmFyIEhUTUwgPSAkKCcjZWFjaC1mYXEtaXRlbS1pZnJhbWUtJyArIEZBUUlEKS50ZXh0KCk7CiAgICAgICAgCiAgICAgICAgLy9zaG93IG1vZGFsCiAgICAgICAgQ29yZS5VSS5EaWFsb2cuU2hvd0RpYWxvZyh7CiAgICAgICAgICAgIE1vZGFsOiAndHJ1ZScsCiAgICAgICAgICAgIFRpdGxlOiBGQVFUaXRsZSwKICAgICAgICAgICAgSFRNTDogSFRNTCwKICAgICAgICAgICAgUG9zaXRpb25Ub3A6ICcxMHB4JywKICAgICAgICAgICAgUG9zaXRpb25MZWZ0OiAnMTUlJywKICAgICAgICAgICAgQWxsb3dBdXRvR3JvdzogJ3RydWUnLAogICAgICAgICAgICBDbG9zZU9uRXNjYXBlOiAndHJ1ZScsCiAgICAgICAgICAgIC8vY2FsbCB0aGUgYmlnZ2VzdCBtb2RhbCBzaXplCiAgICAgICAgICAgIENsYXNzOiAnbW9kYWwtbGcnLAogICAgICAgICAgICBIaWRlRm9vdGVyOiAndHJ1ZScsCiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBDb3JlLkluaXQuUmVnaXN0ZXJOYW1lc3BhY2UoVGFyZ2V0TlMsICdBUFBfTU9EVUxFJyk7CgogICAgcmV0dXJuIFRhcmdldE5TOwp9KFpaWi5EeW5hbWljRmllbGQuRkFRSXRlbSB8fCB7fSkpOw==</File>
        <File Location="var/httpd/htdocs/skins/Agent/default/css/Core.Agent.DynamicFieldFAQItem.css" Permission="660" Encode="Base64">LyoKQ29weXJpZ2h0IChDKSAyMDI0IG1vLWF6ZmFyLCBodHRwczovL2dpdGh1Yi5jb20vbW8tYXpmYXIvCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eHQuCiovCgovKioKICogQHBhY2thZ2UgICAgIFNraW4gIkRlZmF1bHQiCiAqIEBzZWN0aW9uICAgICBEZWZhdWx0IFNldHRpbmdzCiAqLwoKIEBtZWRpYSBzY3JlZW4scHJvamVjdGlvbix0dixoYW5kaGVsZCB7CgogICAgLmVhY2gtZmFxLWl0ZW0gewogICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgIG1hcmdpbi10b3A6IDZweDsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICB9Cgp9</File>
        <File Location="var/httpd/htdocs/skins/Customer/default/css/Core.Customer.DynamicFieldFAQItem.css" Permission="660" Encode="Base64">LyoKQ29weXJpZ2h0IChDKSAyMDI0IG1vLWF6ZmFyLCBodHRwczovL2dpdGh1Yi5jb20vbW8tYXpmYXIvCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eHQuCiovCgovKioKICogQHBhY2thZ2UgICAgIFNraW4gIkRlZmF1bHQiCiAqIEBzZWN0aW9uICAgICBEZWZhdWx0IFNldHRpbmdzCiAqLwoKIEBtZWRpYSBzY3JlZW4scHJvamVjdGlvbix0dixoYW5kaGVsZCB7CgogICAgLmVhY2gtZmFxLWl0ZW0gewogICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgIG1hcmdpbi10b3A6IDZweDsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICB9Cgp9</File>
    </Filelist>
</otrs_package>